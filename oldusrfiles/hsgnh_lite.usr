c-----------------------------------------------------------------------
C
C  USER SPECIFIED ROUTINES:
C
C     - boundary conditions
C     - initial conditions
C     - variable properties
C     - local acceleration for fluid (a)
C     - forcing function for passive scalar (q)
C     - general purpose routine for checking errors etc.
C
c-----------------------------------------------------------------------
      subroutine uservp (ix,iy,iz,eg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      integer e,f,eg
      e = gllel(eg)
    
      utrans = param(1)
      
      if(z.gt.0.5) then
      udiff = param(2)
      endif
	  
      if(z.le.0.5) then
      udiff = param(2) + 199*param(2)*(0.5-z)/0.5
      endif

      return
      end
c-----------------------------------------------------------------------
      subroutine userf  (ix,iy,iz,eg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      integer e,f,eg
c     e = gllel(eg)


c     Note: this is an acceleration term, NOT a force!
c     Thus, ffx will subsequently be multiplied by rho(x,t).
      ffx=0.0
      ffy=0.0
      ffz=0.0     

      return
      end
c-----------------------------------------------------------------------
      subroutine userq  (ix,iy,iz,eg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      integer e,f,eg
c     e = gllel(eg)

      qvol   = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine userchk
      include 'SIZE'
      include 'TOTAL'

      parameter (ninp=5)   ! number of pressure interpolation points
      common /TURBULENCESPECTRA/
     & uvw_ts(3,ninp),xyz_ts(3,ninp)

      logical ifverbose
      common /data_sg/ ubar_sg  
      logical exist
      character*20 vfilename

      frfile_number = 0
	  
      nlx1m=((lx1-1)/2)+1 

      nxyz=lx1*ly1*lz1 
      ntot=lx1*ly1*lz1*nelt
       
c----------------------------------------------------------------------
c in this part, we are trying to plot the one-dimensional spectra
c Please see Pope's book p224.
c a total number of 1000 points are sampled
c but longitudinal autocorrelation are only calculated for the first 500 hundred points.
c----------------------------------------------------------------------
      n_interp=0
      if (nid.eq.0) then
	  n_interp=ninp
	  
      pi = 3.1415926
      R = 30*0.0254  ! 
      alpha = pi/8   ! 22.5 degree
      totalz = 10*0.0254 
      startz = 60*0.0254
      endz = startz - totalz
      dz = totalz/dble(ninp-1)

       xyz_ts(1,1) = R*cos(alpha)
       xyz_ts(2,1) = -R*sin(alpha)
       xyz_ts(3,1) = startz
	  
      do iz = 2,ninp
       xyz_ts(1,iz) = R*cos(alpha)
       xyz_ts(2,iz) = -R*sin(alpha)
       xyz_ts(3,iz) = xyz_ts(3,iz-1) - dz
      enddo

      write(6,*) "*** Interp. Matrix generated"
      endif


      call interp_v(uvw_ts,xyz_ts,n_interp)

      if (nid.eq.0) then
      do iz = 1,ninp

      write(vfilename,11)iz
      inquire(file=vfilename,exist=exist)
      if(exist) then 
        open(198,file=vfilename,form='formatted',status='old',
     &position='append',action='write')
      else
        open(198,file=vfilename,form='formatted',status='new',
     &action='write')
      endif
      write(198,10)  uvw_ts(1,iz),uvw_ts(2,iz),uvw_ts(3,iz)

   11 format('velocity.',I1,'.dat') 	  
   10 format(F12.5,',',F12.5,',',F12.5)
      close(198)
      enddo

      endif

c      
c
c      if (nid.eq.0) then
c      open(199,file='pxyz.dat',form='formatted',status='replace')
c      do j=1,ninp
c      write(199,10) j,xyz(1,j),xyz(2,j),xyz(3,j)
c      enddo
c   10 format(I4,',',F12.5,',',F12.5,',',F12.5)
c      close(199)
c      endif
c	  
c      if (nid.eq.0) then
c      inquire(file='phist.dat',exist=exist)
c      if(exist) then 
c        open(198,file='phist.dat',form='formatted',status='old',
c     &position='append',action='write')
c      else
c        open(198,file='phist.dat',form='formatted',status='new',
c     &action='write')
c      endif
c      write(198,11) istep,ppp(1,1),ppp(1,2),ppp(1,3),ppp(1,4),
c     &ppp(1,5),ppp(1,6),ppp(1,7)
c   11 format(I4,',',F12.5,',',F12.5,',',F12.5,',',F12.5,
c     &',',F12.5,',',F12.5,',',F12.5)
c      close(198)
c      endif
c	  
c---------------------------------------------------------------------------------

      pmax=glmax(pr,ntot)  
      pmin=glmin(pr,ntot)
      if (nid.eq.0) write(6,*) "Pressure: ",pmin," - ",pmax 

      vmax=glmax(vz,ntot)
      vmin=glmin(vz,ntot)
      if (nid.eq.0) write(6,*) "Velocity z: ",vmin," - ",vmax

c      call avg_all()
      iostep = param(15)
      if (mod(istep,iostep).eq.0.and.istep.gt.0) then
      call print_limits
      endif

c calculate representative mesh size
C      if(istep.eq.0) 
      call mesh_size_and_taylor_scale()

c calculate kolmogrove scale and compare with mesh size
c      call taylor_scale()
	  
      return
      end
c--------------------------------------------------------------------------------
      subroutine useric (ix,iy,iz,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      common /data_sg/ ubar_sg

      integer idum,e,eg
      save    idum
      data    idum / 0 /

      if (idum.eq.0) idum = 99 + nid
      ux = 0.05*(ran1(idum)-0.5)*ubar_sg  !uin(ix,iy,iz,e)
      uy = 0.05*(ran1(idum)-0.5)*ubar_sg  !vin(ix,iy,iz,e)
      uz = (-1.0+0.05*(ran1(idum)-0.5))*ubar_sg  !win(ix,iy,iz,e)	! *wscale to save time?
      temp=0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine userbc (ix,iy,iz,iside,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      common /data_sg/ ubar_sg

      integer idum1,eg
      save    idum1
      data    idum1 / 0 /

      integer e,ieg

      e = gllel(ieg)

      ux = 0.0
      uy = 0.0
      uz = -1.0*ubar_sg

      temp=0

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat
      include 'SIZE'
      include 'TOTAL'
      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat3
      include 'SIZE'
      include 'TOTAL'
      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat2         ! need to scale geometry here. 
      parameter (np_nstp=1)
      include 'SIZE'
      include 'TOTAL'

      integer i,j,k,e,eg,f,ipipe_mask  

      common /data_sg/ ubar_sg
 

c setting bulk velocity
      ubar_sg = 0.49085 ! quarter of a feet per second??, m/s??
c velocity at inlet, corresponding to velocity arrays at 1.28 m/s
c Velocity at inlet * 162.2 = veloicity in arrays *62.2

c convert geometry from inch to meter.
      ntot = nx1*ny1*nz1*nelt
c=========
c flat inlet and outlet.
c unit in inch.
c
c  
c
      do i=1,ntot
      flag_upper = 0
      flag_lower = 0

      R = sqrt(xm1(i,1,1,1)**2 + ym1(i,1,1,1)**2)
      pi = 3.1415926
      alpha = 45.0 - acos(xm1(i,1,1,1)/R)*180.0/pi

      z_max = 75.0
      z_min = 0.0
      z_1 = 68.0
      z_2 = 25.0
	  
      z_upper = 68.0 + alpha*0.04166666666
      z_lower = 25.0 + alpha*0.04166666666
      if(zm1(i,1,1,1).gt.z_upper) flag_upper = 1
      if(zm1(i,1,1,1).lt.z_lower) flag_lower = 1

      if (flag_upper.eq.1) then
      ratio = (zm1(i,1,1,1)-z_upper)/(z_max-z_1)
      zm1(i,1,1,1) = z_upper + ratio*(z_max-z_upper)
      endif
    
      if (flag_lower.eq.1) then
      ratio = (zm1(i,1,1,1)-z_lower)/(z_min-z_2)
      zm1(i,1,1,1) = z_min + (1-ratio)*(z_lower-z_min)
      endif
      
      enddo  
c=========	  

 
      do i=1,ntot
         xm1(i,1,1,1) = xm1(i,1,1,1)*0.0254
         ym1(i,1,1,1) = ym1(i,1,1,1)*0.0254
         zm1(i,1,1,1) = zm1(i,1,1,1)*0.0254	
      enddo
      param(59) = 1     ! force nek5 to recognize element deformation.
   
      if (nid.eq.0) then 
      write(6,*) 'geometry scale completed'	  
      endif	  

      return
      end
c-----------------------------------------------------------------------
c-----------------------------------------------------------------------
      subroutine interp_v(uvw,xyz,n)
c
c     evaluate velocity for list of points xyz
c
c     Note:  -- modify
c     intpts to get rid off " WARNING: point on boundary or ..."

      include 'SIZE'
      include 'TOTAL'

      real uvw(3,n),xyz(3,n)
      logical ifjac,ifpts

      parameter(nmax=lpart,nfldmax=ldim)
      common /rv_intp/ pts(ldim*nmax)
      common /iv_intp/ ihandle
      common /outtmp/ wrk(lx1*ly1*lz1*lelt,nfldmax)

      integer icalld,e
      save    icalld
      data    icalld /0/

      nxyz  = nx1*ny1*nz1
      ntot  = nxyz*nelt
      nflds = 3 !u,v,w

      if (n.gt.nmax) call exitti ('ABORT: interp_v() n > nmax!$',n)

      if (nelgt.ne.nelgv) call exitti
     $   ('ABORT: interp_v() nelgt.ne.nelgv not yet supported!$',nelgv)

      do i=1,n
         pts(i)     = xyz(1,i)
         pts(i + n) = xyz(2,i)
         if (if3d)  pts(i + n*2) = xyz(3,i)
      enddo

      if (icalld.eq.0) then             ! interpolation setup
        icalld = 1
        tolin  = 1.e-8
        call intpts_setup(tolin,ihandle)
      endif


      ! pack working array
      call opcopy(wrk(1,1),wrk(1,2),wrk(1,3),vx,vy,vz)

      ! interpolate
      ifjac  = .true.           ! output transpose (of Jacobian)
      ifpts  = .true.            ! find points
      call intpts(wrk,nflds,pts,n,uvw,ifjac,ifpts,ihandle)      ! copy array instead?

      return
      end
c-----------------------------------------------------------------------
C=======================================================================
      subroutine print_limits
      include 'SIZE'
      include 'TOTAL'


      integer lxyze
      parameter(lxyze=lx1*ly1*lz1*lelv)

C     Primitive Variables
      real umin,umax,vmin,vmax,wmin,wmax,pmin,pmax
      real hmin,hmax,kmin,kmax,mmin,mmax
      real rmsu,rmsv,rmsw,rmsp,rmsh,rmsk,rmsm
      real du,dv,dw,dp,dh,dk,dm

C     other variables
      real vfmin,vfmax,tempmin,tempmax,mumin,mumax
      real ypmin,ypmax
	  
      common /wDist/ walldist(lx1,ly1,lz1,lelv)
	  common /property/ dens0,visc0
c	  data dens0,visc0/992.34d0,6.56d-2/

	 integer n

      n=nx1*ny1*nz1*nelv
	  
	  call cheap_dist(walldist,1,'W  ')	 
      call y_p_limits(walldist,ypmin,ypmax)

      if(nid.eq.0) then
        write(*,*)
        write(*,255) 'y_p plus',ypmin,ypmax
        write(*,*)
      endif

 253  format(2x,a16,4es15.5)
 254  format(2x,a16,4a15)
 255  format(2x,a16,2es15.5)

      return
      end

C-------------------------------------------------------------------
      subroutine y_p_limits(wd,ypmin,ypmax)
      include 'SIZE'
      include 'TOTAL'

      integer lxyz,lxyze
      parameter(lxyz=lx1*ly1*lz1,lxyze=lxyz*lelv)
      integer e,i,i0,i1,j,j0,j1,k,k0,k1,iw,jw,kw,i2
      integer ipoint,wpoint
      real gradu(lxyze,3,3),dens(1),visc(1),wd(1)
      real tau(3),norm(3),rho,mu,vsca,tauw,yp,utau
      real n_points_wall,n_less_than_one,n_less_than_five
      real totalAA,singleAA
   
      totalAA = 0.0
      singleAA = 0.0

      n_points_wall = 0.0
      n_less_than_one = 0.0
      n_less_than_five = 0.0

      ypmin=1.0d30
      ypmax=-1.0d30

      call gradm1(gradu(1,1,1),gradu(1,1,2),gradu(1,1,3),vx)
      call gradm1(gradu(1,2,1),gradu(1,2,2),gradu(1,2,3),vy)
      call gradm1(gradu(1,3,1),gradu(1,3,2),gradu(1,3,3),vz)

      call opcolv(gradu(1,1,1),gradu(1,1,2),gradu(1,1,3),bm1)
      call opcolv(gradu(1,2,1),gradu(1,2,2),gradu(1,2,3),bm1)
      call opcolv(gradu(1,3,1),gradu(1,3,2),gradu(1,3,3),bm1)

      call opdssum(gradu(1,1,1),gradu(1,1,2),gradu(1,1,3))
      call opdssum(gradu(1,2,1),gradu(1,2,2),gradu(1,2,3))
      call opdssum(gradu(1,3,1),gradu(1,3,2),gradu(1,3,3))

      call opcolv(gradu(1,1,1),gradu(1,1,2),gradu(1,1,3),binvm1)
      call opcolv(gradu(1,2,1),gradu(1,2,2),gradu(1,2,3),binvm1)
      call opcolv(gradu(1,3,1),gradu(1,3,2),gradu(1,3,3),binvm1)

      do e=1,nelv
        do iside=1,2*ldim
          if(cbc(iside,e,1).eq.'W  ')then
		  
          ipipe_mask=1
          nlx1m=((lx1-1)/2)+1

          if (iside.eq.1) then
          wx1=xm1(nlx1m,1,nlx1m,e)
          wy1=ym1(nlx1m,1,nlx1m,e)
          endif  

          if (iside.eq.2) then
          wx1=xm1(lx1,nlx1m,nlx1m,e)
          wy1=ym1(lx1,nlx1m,nlx1m,e)
          endif

          if (iside.eq.3) then
          wx1=xm1(nlx1m,lx1,nlx1m,e)
          wy1=ym1(nlx1m,lx1,nlx1m,e)
          endif

          if (iside.eq.4) then
          wx1=xm1(1,nlx1m,nlx1m,e)
          wy1=ym1(1,nlx1m,nlx1m,e)
          endif

          if (iside.eq.5) then
          wx1=xm1(nlx1m,nlx1m,1,e)
          wy1=ym1(nlx1m,nlx1m,1,e)
          endif

          if (iside.eq.6) then
          wx1=xm1(nlx1m,nlx1m,lx1,e)
          wy1=ym1(nlx1m,nlx1m,lx1,e)
          endif

          rr1=sqrt(wx1**2+wy1**2)/0.0254
   
c if on side wall 1
          if (wy1.gt.(-1e-4)) then
          ipipe_mask=0
          endif

c if on side wall 2
          if ((wx1+wy1).lt.1e-4) then
          ipipe_mask=0
          endif

c if at inner wall
          if (rr1.lt.26.1) then
          ipipe_mask=0
          endif

c if at outer wall
          if (rr1.gt.32.9) then
          ipipe_mask=0
          endif 
		  
          if(ipipe_mask.eq.1) then
            i0=1
            j0=1
            k0=1
            i1=lx1
            j1=ly1
            k1=lz1
            if(iside.eq.1) then
              j0=2
              j1=2
            elseif(iside.eq.2) then
              i0=lx1-1
              i1=lx1-1
            elseif(iside.eq.3) then
              j0=ly1-1
              j1=ly1-1
            elseif(iside.eq.4) then
              i0=2
              i1=2
            elseif(iside.eq.5) then
              k0=2
              k1=2
            elseif(iside.eq.6) then
              k0=lz1-1
              k1=lz1-1
            endif
            do i=i0,i1
            do j=j0,j1
            do k=k0,k1
              iw=i
              jw=j
              kw=k
              if    (iside.eq.1) then
                jw=1
                norm(1)=unx(iw,kw,iside,e)
                norm(2)=uny(iw,kw,iside,e)
                norm(3)=unz(iw,kw,iside,e)
                singleAA = area(iw,kw,iside,e)
              elseif(iside.eq.2) then
                iw=lx1
                norm(1)=unx(jw,kw,iside,e)
                norm(2)=uny(jw,kw,iside,e)
                norm(3)=unz(jw,kw,iside,e)
                singleAA = area(jw,kw,iside,e)
              elseif(iside.eq.3) then
                jw=ly1
                norm(1)=unx(iw,kw,iside,e)
                norm(2)=uny(iw,kw,iside,e)
                norm(3)=unz(iw,kw,iside,e)
                singleAA = area(iw,kw,iside,e)
              elseif(iside.eq.4) then
                iw=1
                norm(1)=unx(jw,kw,iside,e)
                norm(2)=uny(jw,kw,iside,e)
                norm(3)=unz(jw,kw,iside,e)
                singleAA = area(jw,kw,iside,e)
              elseif(iside.eq.5) then
                kw=1
                norm(1)=unx(iw,jw,iside,e)
                norm(2)=uny(iw,jw,iside,e)
                norm(3)=unz(iw,jw,iside,e)
                singleAA = area(iw,jw,iside,e)
              else
                kw=lx1
                norm(1)=unx(iw,jw,iside,e)
                norm(2)=uny(iw,jw,iside,e)
                norm(3)=unz(iw,jw,iside,e)
                singleAA = area(iw,jw,iside,e)
              endif
              ipoint=i+(j-1)*lx1+(k-1)*lx1*ly1+(e-1)*lxyz
              wpoint=iw+(jw-1)*lx1+(kw-1)*lx1*ly1+(e-1)*lxyz
c              if(iflomach) then
c                mu=visc(wpoint)
c                rho=dens(wpoint)
c              else
               mu=param(2)
               rho=param(1)
c              endif

              do i2=1,ldim
              tau(i2)=0.0
                do j2=1,ldim
                  tau(i2)=tau(i2)+
     &             mu*(gradu(wpoint,i2,j2)+gradu(wpoint,j2,i2))*norm(j2)
                enddo
              enddo

              vsca=0.0
              do i2=1,ldim
                vsca=vsca+tau(i2)*norm(i2)
              enddo

              tauw=0.0
              do i2=1,ldim
                tauw=tauw+(tau(i2)-vsca*norm(i2))**2
              enddo
              tauw=sqrt(tauw)
              utau=sqrt(tauw/rho)
              yp=wd(ipoint)*utau*rho/mu
              if(yp.gt.0) ypmin=min(ypmin,yp)
              ypmax=max(ypmax,yp)

              n_points_wall = n_points_wall + 1.0
              if(yp.le.1.0) n_less_than_one = n_less_than_one + 1.0
              if(yp.le.5.0) n_less_than_five= n_less_than_five+ 1.0
  
              totalAA = totalAA + singleAA
            enddo
            enddo
            enddo
          endif
 
          endif
        enddo
      enddo

      ypmin=glmin(ypmin,1)
      ypmax=glmax(ypmax,1)

      n_points_wall = glsum(n_points_wall,1)
      n_less_than_one = glsum(n_less_than_one,1)
      n_less_than_five = glsum(n_less_than_five,1)
      totalAA = glsum(totalAA,1) 

      if (nid.eq.0) write(6,*) "n_points_wall is :",n_points_wall
      if (nid.eq.0) write(6,*) "n_less_than_one is :",n_less_than_one
      if (nid.eq.0) write(6,*) "n_less_than_five is :",n_less_than_five

      ratio = n_less_than_one/n_points_wall
      if (nid.eq.0) write(6,*) "ratio less than 1.0 is :",ratio         
      ratio = n_less_than_five/n_points_wall
      if (nid.eq.0) write(6,*) "ratio less than 5.0 is :",ratio 
  
      if (nid.eq.0) write(6,*) "total wetted area is: ", totalAA
      
      return
      end
cc-----------------------------------------------------------------------
      subroutine mesh_size()
cc determine a representative size of a grid point in a element.
cc using the shortest nearst point distance to present the mesh size.
 
      include 'SIZE'
      include 'TOTAL'
      integer i,j,k,ie,ntot
      integer im,ip,jm,jp,km,kp
      real*8 di,dj,dk

      real*8 meshsizemin,meshsizemax
      real*8 meshsize(lx1,ly1,lz1,lelt)

      if (nid.eq.0) write(6,*) "call mesh_size" 

      ntot = nx1*ny1*nz1*nelv
	  
      call rzero(meshsize,ntot)	  
	
c Calculate distance between GLL points

      do ie=1,nelv
         do k=1,nz1
           km = max(1,k-1)
           kp = min(nz1,k+1)
           do j=1,ny1
             jm = max(1,j-1)
             jp = min(ny1,j+1)
             do i=1,nx1
               im = max(1,i-1)
               ip = min(nx1,i+1)

               di = sqrt((xm1(ip,j,k,ie)-xm1(im,j,k,ie))**2
     $            + (ym1(ip,j,k,ie)-ym1(im,j,k,ie))**2
     $            + (zm1(ip,j,k,ie)-zm1(im,j,k,ie))**2)

               dj = sqrt((xm1(i,jp,k,ie)-xm1(i,jm,k,ie))**2
     $            + (ym1(i,jp,k,ie)-ym1(i,jm,k,ie))**2
     $            + (zm1(i,jp,k,ie)-zm1(i,jm,k,ie))**2)

               dk = sqrt((xm1(i,j,kp,ie)-xm1(i,j,km,ie))**2
     $            + (ym1(i,j,kp,ie)-ym1(i,j,km,ie))**2
     $            + (zm1(i,j,kp,ie)-zm1(i,j,km,ie))**2)

               di = di/dble(ip-im)
               dj = dj/dble(jp-jm)
               dk = dk/dble(kp-km)
               meshsize(i,j,k,ie) = (di*dj*dk)**(1.0/3.0)

             enddo
           enddo
         enddo
      enddo

      meshsizemax=glmax(meshsize,ntot)
      meshsizemin=glmin(meshsize,ntot)
      if (nid.eq.0) write(6,*) "meshsize: ",meshsizemin," - ",meshsizemax
 
      call outpost(meshsize,meshsize,meshsize,
     &meshsize,meshsize,'msh')
      call exitt()
	  
      return
      end
c------------------------------------------------------------------------
cc-----------------------------------------------------------------------
      subroutine mesh_size_and_taylor_scale()
cc determine a representative size of a grid point in a element.
cc using the shortest nearst point distance to present the mesh size.
 
      include 'SIZE'
      include 'TOTAL'
      integer i,j,k,ie,ntot
      integer im,ip,jm,jp,km,kp
      real*8 di,dj,dk

      real*8 meshsizemin,meshsizemax
      real*8 meshsize(lx1,ly1,lz1,lelt)
	  
      integer lxyz,lxyze
      parameter(lxyz=lx1*ly1*lz1,lxyze=lxyz*lelv)
      real gradu(lxyze,3,3),alpha,beta,smax,smin
      logical ifverbose
      
      common /TAYLOR_SCALE/ gradu_avg(lxyze,3,3)
     & , gradu2_avg(lxyze,3,3)
     & , u_avg(lxyze)
     & , u2_avg(lxyze)
     & , v_avg(lxyze)
     & , v2_avg(lxyze)
     & , w_avg(lxyze)
     & , w2_avg(lxyze)
     & , tay_scale(lxyze)
     & , tay_ratio(lxyze)
     & , kol_scale(lxyze)
     & , kol_ratio(lxyze)

      if (nid.eq.0) write(6,*) "call mesh_size" 

      ntot = nx1*ny1*nz1*nelv
	  
      call rzero(meshsize,ntot)	  
	
c Calculate distance between GLL points

      do ie=1,nelv
         do k=1,nz1
           km = max(1,k-1)
           kp = min(nz1,k+1)
           do j=1,ny1
             jm = max(1,j-1)
             jp = min(ny1,j+1)
             do i=1,nx1
               im = max(1,i-1)
               ip = min(nx1,i+1)

               di = sqrt((xm1(ip,j,k,ie)-xm1(im,j,k,ie))**2
     $            + (ym1(ip,j,k,ie)-ym1(im,j,k,ie))**2
     $            + (zm1(ip,j,k,ie)-zm1(im,j,k,ie))**2)

               dj = sqrt((xm1(i,jp,k,ie)-xm1(i,jm,k,ie))**2
     $            + (ym1(i,jp,k,ie)-ym1(i,jm,k,ie))**2
     $            + (zm1(i,jp,k,ie)-zm1(i,jm,k,ie))**2)

               dk = sqrt((xm1(i,j,kp,ie)-xm1(i,j,km,ie))**2
     $            + (ym1(i,j,kp,ie)-ym1(i,j,km,ie))**2
     $            + (zm1(i,j,kp,ie)-zm1(i,j,km,ie))**2)

               di = di/dble(ip-im)
               dj = dj/dble(jp-jm)
               dk = dk/dble(kp-km)
               meshsize(i,j,k,ie) = (di*dj*dk)**(1.0/3.0)

             enddo
           enddo
         enddo
      enddo

      meshsizemax=glmax(meshsize,ntot)
      meshsizemin=glmin(meshsize,ntot)
      if (nid.eq.0) write(6,*) "meshsize: ",meshsizemin," - ",meshsizemax
 
      call gradm1(gradu(1,1,1),gradu(1,1,2),gradu(1,1,3),vx)
      call gradm1(gradu(1,2,1),gradu(1,2,2),gradu(1,2,3),vy)
      call gradm1(gradu(1,3,1),gradu(1,3,2),gradu(1,3,3),vz)

      call opcolv(gradu(1,1,1),gradu(1,1,2),gradu(1,1,3),bm1)
      call opcolv(gradu(1,2,1),gradu(1,2,2),gradu(1,2,3),bm1)
      call opcolv(gradu(1,3,1),gradu(1,3,2),gradu(1,3,3),bm1)

      call opdssum(gradu(1,1,1),gradu(1,1,2),gradu(1,1,3))
      call opdssum(gradu(1,2,1),gradu(1,2,2),gradu(1,2,3))
      call opdssum(gradu(1,3,1),gradu(1,3,2),gradu(1,3,3))

      call opcolv(gradu(1,1,1),gradu(1,1,2),gradu(1,1,3),binvm1)
      call opcolv(gradu(1,2,1),gradu(1,2,2),gradu(1,2,3),binvm1)
      call opcolv(gradu(1,3,1),gradu(1,3,2),gradu(1,3,3),binvm1)

      if(istep.gt.0) then
 
      beta = 1.0/dble(istep)
      alpha = 1.0- beta
      ifverbose = .false.
	  
      call avg1(gradu_avg,gradu,alpha,beta,ntot9,'gu1',ifverbose)
      call avg2(gradu2_avg,gradu,alpha,beta,ntot9,'gu2',ifverbose)

      call avg1(u_avg,vx,alpha,beta,ntot,'uavg',ifverbose)
      call avg1(v_avg,vy,alpha,beta,ntot,'vavg',ifverbose)
      call avg1(w_avg,vz,alpha,beta,ntot,'wavg',ifverbose)
	  
      call avg2(u2_avg,vx,alpha,beta,ntot,'u2avg',ifverbose)
      call avg2(v2_avg,vy,alpha,beta,ntot,'v2avg',ifverbose)
      call avg2(w2_avg,vz,alpha,beta,ntot,'w2avg',ifverbose)
	  
      endif

      iostep = param(15)
      if ( (mod(istep,iostep).eq.0.and.istep.gt.1)) then
       
	  do i = 1,ntot
      diss =  0.0
      tke = 0.0
        do j = 1,3
        do k = 1,3
           diss = diss + (gradu2_avg(i,j,k) - gradu_avg(i,j,k)**2)
        enddo
        enddo

      tke = u2_avg(i) - u_avg(i)**2
      tke = tke +  v2_avg(i) - v_avg(i)**2
      tke = tke +  w2_avg(i) - w_avg(i)**2

      nu = param(2)/param(1)
      diss = diss*nu

      tay_scale(i) = (15*nu*tke/diss)**0.5
      tay_ratio(i) = meshsize(i,1,1,1)/tay_scale(i) !! should be less than 1

      kol_scale(i) = (nu**3/diss)**0.25
      kol_ratio(i) =  meshsize(i,1,1,1)/kol_scale(i) !! should be less than 1

      enddo

      smax=glmax(tay_scale,ntot)  
      smin=glmin(tay_scale,ntot)
      if (nid.eq.0) write(6,*) "tay_scale: ",smin," - ",smax
	
      smax=glmax(tay_ratio,ntot)  
      smin=glmin(tay_ratio,ntot)
      if (nid.eq.0) write(6,*) "tay_ratio: ",smin," - ",smax
	  
      smax=glmax(kol_scale,ntot)  
      smin=glmin(kol_scale,ntot)
      if (nid.eq.0) write(6,*) "kol_scale: ",smin," - ",smax
	
      smax=glmax(kol_ratio,ntot)  
      smin=glmin(kol_ratio,ntot)
      if (nid.eq.0) write(6,*) "kol_ratio: ",smin," - ",smax

      call outpost(meshsize,tay_scale,tay_ratio,
     &kol_scale,kol_ratio,'tay')
      endif
	  
      return
      end
c------------------------------------------------------------------------

C------------------------------------------------------------------------

c      subroutine taylor_scale()
cc calculate taylor microscale
c
cc and compare with mesh size.
c
c      include 'SIZE'
c      include 'TOTAL'
c
c      integer icalld_tay
c      save   icalld_tay
c      data   icalld_tay  /0/
c	  
c      integer lxyz,lxyze
c      parameter(lxyz=lx1*ly1*lz1,lxyze=lxyz*lelv)
c      real gradu(lxyze,3,3),alpha,beta,smax,smin
c      
c      common /TAYLOR/ gradu_avg(lxyze,3,3)
c     & , gradu2_avg(lxyze,3,3)
c     & , u_avg(lxyze)
c     & , u2_avg(lxyze)
c     & , v_avg(lxyze)
c     & , v2_avg(lxyze)
c     & , w_avg(lxyze)
c     & , w2_avg(lxyze)
c     & , tay_scale(lxyze)
c     & , tay_ratio(lxyze)
c     & , kol_scale(lxyze)
c     & , kol_ratio(lxyze)
c
cc      common /MESHSIZE_KIRK/ meshsize(lx1,ly1,lz1,lelv)
c 
c      integer i,j,k,e,ntot,ntot9,iostep
c      logical ifverbose
c
c      if (nid.eq.0) write(6,*) "call taylor_scale"
c
c      ntot = lxyze
c      ntot9 = lxyze*9
c
c      call gradm1(gradu(1,1,1),gradu(1,1,2),gradu(1,1,3),vx)
c      call gradm1(gradu(1,2,1),gradu(1,2,2),gradu(1,2,3),vy)
c      call gradm1(gradu(1,3,1),gradu(1,3,2),gradu(1,3,3),vz)
c
c      call opcolv(gradu(1,1,1),gradu(1,1,2),gradu(1,1,3),bm1)
c      call opcolv(gradu(1,2,1),gradu(1,2,2),gradu(1,2,3),bm1)
c      call opcolv(gradu(1,3,1),gradu(1,3,2),gradu(1,3,3),bm1)
c
c      call opdssum(gradu(1,1,1),gradu(1,1,2),gradu(1,1,3))
c      call opdssum(gradu(1,2,1),gradu(1,2,2),gradu(1,2,3))
c      call opdssum(gradu(1,3,1),gradu(1,3,2),gradu(1,3,3))
c
c      call opcolv(gradu(1,1,1),gradu(1,1,2),gradu(1,1,3),binvm1)
c      call opcolv(gradu(1,2,1),gradu(1,2,2),gradu(1,2,3),binvm1)
c      call opcolv(gradu(1,3,1),gradu(1,3,2),gradu(1,3,3),binvm1)
c
c
c      if (icalld_tay.eq.0) then             ! interpolation setup
c        icalld_tay = 1
c        call rzero(gradu_avg,ntot9)
c        call rzero(gradu2_avg,ntot9)
c        call rzero(u_avg,ntot)
c        call rzero(v_avg,ntot)
c        call rzero(w_avg,ntot)
c        call rzero(u2_avg,ntot)
c        call rzero(v2_avg,ntot)
c        call rzero(w2_avg,ntot)
c        call rzero(tay_scale,ntot)
c        call rzero(tay_ratio,ntot)
c        call rzero(kol_scale,ntot)
c        call rzero(kol_ratio,ntot)
c      endif
c
c      if(istep.gt.0) then
c 
c      beta = 1.0/dble(istep)
c      alpha = 1.0- beta
c      ifverbose = .false.
c	  
c      call avg1(gradu_avg,gradu,alpha,beta,ntot9,'gu1',ifverbose)
c      call avg2(gradu2_avg,gradu,alpha,beta,ntot9,'gu2',ifverbose)
c
c      call avg1(u_avg,vx,alpha,beta,ntot,'uavg',ifverbose)
c      call avg1(v_avg,vy,alpha,beta,ntot,'vavg',ifverbose)
c      call avg1(w_avg,vz,alpha,beta,ntot,'wavg',ifverbose)
c	  
c      call avg2(u2_avg,vx,alpha,beta,ntot,'u2avg',ifverbose)
c      call avg2(v2_avg,vy,alpha,beta,ntot,'v2avg',ifverbose)
c      call avg2(w2_avg,vz,alpha,beta,ntot,'w2avg',ifverbose)
c
c      do i = 1,ntot
c      diss =  0.0
c      tke = 0.0
c        do j = 1,3
c        do k = 1,3
c           diss = diss + (gradu2_avg(i,j,k) - gradu_avg(i,j,k)**2)
c        enddo
c        enddo
c
c      tke = u2_avg(i) - u_avg(i)**2
c      tke = tke +  v2_avg(i) - v_avg(i)**2
c      tke = tke +  w2_avg(i) - w_avg(i)**2
c
c      nu = param(2)/param(1)
c      diss = diss*nu
c
c      tay_scale(i) = (15*nu*tke/diss)**0.5
cc      tay_ratio(i) = tay_scale(i)/meshsize(i,1,1,1)
cc      tay_ratio(i) = meshsize(i,1,1,1)/tay_scale(i)
c
c      kol_scale(i) = (nu**3/diss)**0.25
cc      kol_ratio(i) = kol_scale(i)/meshsize(i,1,1,1)
cc      kol_ratio(i) =  meshsize(i,1,1,1)/kol_scale(i)
c
c      enddo
c
cc      smax=glmax(meshsize,ntot)  
cc      smin=glmin(meshsize,ntot)
cc      if (nid.eq.0) write(6,*) "meshsize: ",smin," - ",smax
c	
c      smax=glmax(tay_scale,ntot)  
c      smin=glmin(tay_scale,ntot)
c      if (nid.eq.0) write(6,*) "tay_scale: ",smin," - ",smax
c	
c      smax=glmax(tay_ratio,ntot)  
c      smin=glmin(tay_ratio,ntot)
c      if (nid.eq.0) write(6,*) "tay_ratio: ",smin," - ",smax
c	  
c      smax=glmax(kol_scale,ntot)  
c      smin=glmin(kol_scale,ntot)
c      if (nid.eq.0) write(6,*) "kol_scale: ",smin," - ",smax
c	
c      smax=glmax(kol_ratio,ntot)  
c      smin=glmin(kol_ratio,ntot)
c      if (nid.eq.0) write(6,*) "kol_ratio: ",smin," - ",smax
c	  
c      endif ! (istep.gt.0)
c	  
cc      iostep = param(15)
cc      if ( (mod(istep,iostep).eq.0.and.istep.gt.1)) then
cc      call outpost(mdist,tay_scale,tay_ratio,kol_scale,kol_ratio,'tay')
cc      endif
c	  
c      return
c      end
cc-----------------------------------------------------------------------
c automatically added by makenek
      subroutine usrsetvert(glo_num,nel,nx,ny,nz) ! to modify glo_num
      integer*8 glo_num(1)
      return
      end


