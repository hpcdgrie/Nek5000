c-----------------------------------------------------------------------
c  nek5000 user-file template
c
c  user specified routines:
c     - uservp  : variable properties
c     - userf   : local acceleration term for fluid
c     - userq   : local source term for scalars
c     - userbc  : boundary conditions
c     - useric  : initial conditions
c     - userchk : general purpose routine for checking errors etc.
c     - userqtl : thermal divergence for lowMach number flows 
c     - usrdat  : modify element vertices 
c     - usrdat2 : modify mesh coordinates
c     - usrdat3 : general purpose routine for initialization
c     
c-----------------------------------------------------------------------
      subroutine uservp(ix,iy,iz,eg) ! set variable properties

c      implicit none

      integer ix,iy,iz,eg
     
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      integer e
c     e = gllel(eg)

      udiff  = 0.0
      utrans = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine userf(ix,iy,iz,eg) ! set acceleration term
c
c     Note: this is an acceleration term, NOT a force!
c     Thus, ffx will subsequently be multiplied by rho(x,t).
c
c      implicit none

      integer ix,iy,iz,eg

      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      integer e
c     e = gllel(eg)

      ffx = 0.0
      ffy = 0.0
      ffz = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine userq(ix,iy,iz,eg) ! set source term

c      implicit none

      integer ix,iy,iz,eg

      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      integer e
c     e = gllel(eg)

      qvol   = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine userbc(ix,iy,iz,iside,eg) ! set up boundary conditions
c
c     NOTE ::: This subroutine MAY NOT be called by every process
c
c      implicit none

      integer ix,iy,iz,iside,eg

      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
      integer e
      e = gllel(eg)

c      if (cbc(iside,gllel(eg),ifield).eq.'v01')

      ux   = 0.0
      uy   = 0.0
      uz   = 0.0
      temp = 0.0
C      if (cbc(iside,e,1).eq.'mv ') ux = 0.5/100.0
	  
	  
      return
      end
c-----------------------------------------------------------------------
      subroutine useric(ix,iy,iz,eg) ! set up initial conditions

c      implicit none

      integer ix,iy,iz,eg

      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      ux   = 0.0
      uy   = 0.0
      uz   = 0.0
      temp = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine userchk()

c      implicit none

      include 'SIZE'
      include 'TOTAL'

      if(istep.eq.0) then
         call read_pebbles_xyz()
         call proj_to_pebbles()
      endif 
  
      call fix_geom()

c      if(istep.eq.param(11)) then
c      if(nid.eq.0) write(6,*) 'nfield is', nfield
c
c	  do iel=1,nelv
c        do ifc=1,2*ndim
c          id_face = bc(5,ifc,iel,1)
c          if (id_face.eq.10) then       ! SideSet 10 pebble surfaces
c             cbc(ifc,iel,1) = 'W  '
c          endif
c        enddo
c      enddo
c
c      call gen_rea(2)
c      call gen_re2(2)
c      endif
  
C      do i=1,1
C      call my_mv_mesh ! mesh moving velocity predictor
C      call limit_mv_velocity() ! adjust mesh face velocity
C      enddo
 
      call my_mv_mesh

	  
      !===== find max cflf location ?
      call compute_cfl(cfl,wx,wy,wz,dt)	  

c      if (mod(istep,iostep).eq.0) then
c      call outpost(cflf,cflf,cflf,cflf,cflf,'cfl')
c      endif  
	
      ntot = nx1*ny1*nz1*nelv
      clf_max = glmax(cflf,ntot)
      clf_max_x = 0.0
      clf_max_y = 0.0
      clf_max_z = 0.0

      do i =1,ntot
         if(cflf(i,1,1,1).ge.clf_max) then
            clf_max_x = xm1(i,1,1,1)
            clf_max_y = ym1(i,1,1,1)
            clf_max_z = zm1(i,1,1,1)
         endif		 
      enddo

      vec = sqrt(clf_max_x**2 + clf_max_y**2+ clf_max_z**2)
	  
      if(vec.gt.0.0) then
       write(6,*) "max clf xyz: ", clf_max_x,clf_max_y,clf_max_z
      endif
	  
      return
      end
c-----------------------------------------------------------------------
      subroutine limit_mv_velocity() 

c      implicit none

      include 'SIZE'
      include 'TOTAL'

      common /usr_umesh/ umeshx(lx1,ly1,lz1,lelt),
     & umeshy(lx1,ly1,lz1,lelt),
     & umeshz(lx1,ly1,lz1,lelt)

      parameter (lt = lx1*ly1*lz1*lelt)
      common /cfilter/ cfilter(lt)

      real*8 c1,c2,alpha,cfl_l
      real*8 umag1,umag2
      real*8 kappa
      real*8 xyz_max_cfl(3),work(3)
 
 
      integer icalld
      save    icalld
      data    icalld /0/

      ntot = nx1*ny1*nz1*nelv

      call rone(cfilter,ntot)

      c1 = 3.0

c it seems only limit on one points is not enough. trying to do mutiple points
 
      do icf = 1,10

      call rone(cfilter,ntot)

      call compute_cfl(cfl,wx,wy,wz,dt)
c      call compute_cfl(cfl,umeshx,umeshy,umeshz,dt)
      if(nid.eq.0) write(6,*) 'max cfl from wx/y/z :',cfl
	  
c only limit mesh velocity when max cfl > c1
      if(cfl.ge.(c1+0.001)) then 

      cf_r = 0.010556875*2.0*0.25

      pi = 3.1415926

      call rzero(xyz_max_cfl,3)
	  
      do i =1,ntot
        alpha = 1.0
        cfl_l = cflf(i,1,1,1)
        if ((cfl_l.gt.(cfl-1e-8)).and.(cfl_l.lt.(cfl+1e-8))) then
c create a sphere filter near where cfl_l is high
             xyz_max_cfl(1)  = xm1(i,1,1,1)
             xyz_max_cfl(2)  = ym1(i,1,1,1)
             xyz_max_cfl(3)  = zm1(i,1,1,1) 
        endif
      enddo

      call gop(xyz_max_cfl,work,'+  ',3)

      if(nid.eq.0)write(6,*) 'cfl max at xyz :'
      if(nid.eq.0)write(6,*)xyz_max_cfl(1),xyz_max_cfl(2),xyz_max_cfl(3)
	  
c should broad cast xx,yy,zz information to all processors.
c think about how to do it.

      do j =1,ntot
           xx1 = xm1(j,1,1,1)
           yy1 = ym1(j,1,1,1)
           zz1 = zm1(j,1,1,1)
           dist = sqrt((xyz_max_cfl(1)-xx1)**2+
     &(xyz_max_cfl(2)-yy1)**2+(xyz_max_cfl(3)-zz1)**2)

           if ((dist.gt.(cf_r/2.0)).and.(dist.le.cf_r)) then
            kappa = ((dist-cf_r/2.0)/(cf_r/2.0)-0.5)*pi
      cfilter(j)=cfilter(j)*(((SIN(kappa)+1.0)/2.0)*(1.0-c1/cfl)
     & + (c1/cfl))
           endif 

           if(dist.le.(cf_r/2.0)) then
      cfilter(j)=cfilter(j)*(c1/cfl) 
           endif

      enddo 

      call col2(cfilter,bm1,ntot)
      call dssum(cfilter,nx1,ny1,nz1)
      call col2(cfilter,binvm1,ntot)
  
      do i =1,ntot
        wx(i,1,1,1) = wx(i,1,1,1)*cfilter(i)
        wy(i,1,1,1) = wy(i,1,1,1)*cfilter(i)
        wz(i,1,1,1) = wz(i,1,1,1)*cfilter(i)

        umeshx(i,1,1,1) = umeshx(i,1,1,1)*cfilter(i)
        umeshy(i,1,1,1) = umeshy(i,1,1,1)*cfilter(i)
        umeshz(i,1,1,1) = umeshz(i,1,1,1)*cfilter(i)

      enddo

      endif
	  
      enddo ! icf = 1,30

      call opcolv  (wx,wy,wz,bm1)
      call opdssum (wx,wy,wz)
      call opcolv  (wx,wy,wz,binvm1)
  
      call opcolv  (umeshx,umeshy,umeshz,bm1)
      call opdssum (umeshx,umeshy,umeshz)
      call opcolv  (umeshx,umeshy,umeshz,binvm1)
  
      return
      end
c-----------------------------------------------------------------------
c-----------------------------------------------------------------------
      subroutine userqtl ! Set thermal divergence

      call userqtl_scig 

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat()   ! This routine to modify element vertices

c      implicit none

      include 'SIZE'
      include 'TOTAL'

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat2()  ! This routine to modify mesh coordinates

c      implicit none

      include 'SIZE'
      include 'TOTAL'
      integer iel,ifc,id_face
      common /usr_bound/ cbc_usr(6,lelt)
      character*3 cbc_usr

      real cxy(2,4),v32(2),v34(2)

      cxy(1,1) = 36.88*0.0254
      cxy(2,1) = 29.99*0.0254
      cxy(1,2) = 44.08*0.0254
      cxy(2,2) = 17.78*0.0254
      cxy(1,3) = 31.87*0.0254
      cxy(2,3) = 10.59*0.0254
      cxy(1,4) = 24.67*0.0254
      cxy(2,4) = 22.80*0.0254

      v32(1) = (cxy(1,2) - cxy(1,3))
      v32(2) = (cxy(2,2) - cxy(2,3))

      v34(1) = (cxy(1,4) - cxy(1,3))
      v34(2) = (cxy(2,4) - cxy(2,3))

      ntot = nx1*ny1*nz1*nelv
C Rotate mesh to align xy axis
      do i = 1,ntot
        xx =  xm1(i,1,1,1) - cxy(1,3)
        yy =  ym1(i,1,1,1) - cxy(2,3)
		
        pva =( xx*v32(1) + yy*v32(2)) /((v32(1)**2 + v32(2)**2)**0.5)
        pvb =( xx*v34(1) + yy*v34(2)) /((v34(1)**2 + v34(2)**2)**0.5)

	    xm1(i,1,1,1) = pva
        ym1(i,1,1,1) = pvb 

      enddo
 
      param(59) = 1
      if (nid.eq.0) then 
      write(6,*) 'geometry rotation completed'	  
      endif

	  do iel=1,nelv
        do ifc=1,2*ndim
          id_face = bc(5,ifc,iel,1)
          cbc_usr(ifc,iel) = cbc(ifc,iel,1)
          if (id_face.eq.11) then       ! SideSet 10 pebble surfaces
             cbc(ifc,iel,1) = 'mv '
             cbc_usr(ifc,iel) = 'mv '
          endif
        enddo
      enddo

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat3()

c      implicit none

      include 'SIZE'
      include 'TOTAL'

      return
      end
c----------------------------------------------------------------------
      subroutine read_pebbles_xyz()
c     read all pebble center xyz from files.
c     there are total 1016+1016+1003+965+985+1057 = 6042 pebbles.
c 
c      implicit none
      include 'SIZE'
      include 'TOTAL'
      parameter(npebbles = 363)
      common /PEBBLES/ pebble_xyz(3,npebbles)
      real*8 pebble_xyz	  
      integer nptable(1),fileid
      integer ifile,iline,ipebble,dummyint
      character*32 ffname
      character*50 dummyline
      real A,B,C

      real cxy(2,4),v32(2),v34(2)

      cxy(1,1) = 36.88*0.0254
      cxy(2,1) = 29.99*0.0254
      cxy(1,2) = 44.08*0.0254
      cxy(2,2) = 17.78*0.0254
      cxy(1,3) = 31.87*0.0254
      cxy(2,3) = 10.59*0.0254
      cxy(1,4) = 24.67*0.0254
      cxy(2,4) = 22.80*0.0254

      v32(1) = (cxy(1,2) - cxy(1,3))
      v32(2) = (cxy(2,2) - cxy(2,3))

      v34(1) = (cxy(1,4) - cxy(1,3))
      v34(2) = (cxy(2,4) - cxy(2,3))

      nptable = (/363/)

      if(nid.eq.0) write(6,*) 'READING PEBBLE TABLE FILES'

	  
      ipebble = 0	  
      ffname = 'pebbles_in_cube.dat'
 
      if(nid.eq.0) write(6,*) 'reading ',ffname
      fileid = 299
      open(fileid,file=ffname)
      read(fileid,*,iostat=io) dummyint
      do ipebble = 1,npebbles
c       read(fileid,*,iostat=io) A,B,C
c       if(nid.eq.0) write(6,*) A,B,C
      read(fileid,*,iostat=io) pebble_xyz(1,ipebble)
     &,pebble_xyz(2,ipebble)
     &,pebble_xyz(3,ipebble) 
 
c         read(fileid,*,iostat=io) pebble_xyz(1,ipebble)
c         read(fileid,*,iostat=io) pebble_xyz(2,ipebble)
c         read(fileid,*,iostat=io) pebble_xyz(3,ipebble)

      if(nid.eq.0) write(6,*) ipebble,pebble_xyz(1,ipebble)
     &,pebble_xyz(2,ipebble)
     &,pebble_xyz(3,ipebble) 

      enddo
      close(fileid)


	  
c need to rotate pebble 
      do ipebble = 1,npebbles

      pxx = pebble_xyz(1,ipebble)
      pyy = pebble_xyz(2,ipebble)

      pxx =  pxx - cxy(1,3)
      pyy =  pyy - cxy(2,3)

      pva =(pxx*v32(1)+pyy*v32(2))/((v32(1)**2 + v32(2)**2)**0.5)
      pvb =(pxx*v34(1)+pyy*v34(2))/((v34(1)**2 + v34(2)**2)**0.5)
	
      pebble_xyz(1,ipebble) = pva
      pebble_xyz(2,ipebble) = pvb
		  
      if(nid.eq.0) write(6,*) ipebble,pebble_xyz(1,ipebble)
     &,pebble_xyz(2,ipebble)
     &,pebble_xyz(3,ipebble)

      enddo
	  
      if(nid.eq.0) write(6,*) 'done::READING PEBBLE TABLE FILES'
      if(nid.eq.0) write(6,*) 'total pebbles read:',ipebble
	  
      return
      end	  
c----------------------------------------------------------------------
      subroutine proj_to_pebbles()  
c for pebble & chamfer sideset, search for its cooresponding pebbles.
c need to eliminate chamfer part
c also need to add filter for other sidesets
c      implicit none

      include 'SIZE'
      include 'TOTAL'
      parameter (lt = lx1*ly1*lz1*lelt)
      parameter(npebbles = 363)
      common /PEBBLES/ pebble_xyz(3,npebbles)
      common /usr_umesh/ umeshx(lx1,ly1,lz1,lelt),
     & umeshy(lx1,ly1,lz1,lelt),
     & umeshz(lx1,ly1,lz1,lelt)
      common /usr_bound/ cbc_usr(6,lelt)
      character*3 cbc_usr
      integer iel,ifc,id_face
      real*8 xx,yy,zz,dist,dist_max
      real*8 pradius,alpha,kappa,D_sidewall
      real*8 sn(3),proj_nv(3)
      real*8 wd(lt),wf(lt),df,r1 ! wall distance, wall filter
c      integer pid(lx1,ly1,lz1,lelt)
      real*8 chamfer_xyz(3,npebbles*4)
	  
      pradius = 0.03
      D_sidewall = 0.14*1.42087502*100.0
      ntot = nx1*ny1*nz1*nelv
      call rzero(umeshx,ntot)
	  call rzero(umeshy,ntot)
      call rzero(umeshz,ntot)
c      call rzero(pid,ntot)	
	
c do the search first.	  
	  do iel=1,nelv
        do ifc=1,6
		   id_face = bc(5,ifc,iel,1)
	       if (id_face.eq.11) then ! project pebbles
		      call facind(i0,i1,j0,j1,k0,k1,nx1,ny1,nz1,ifc)
              do k=k0,k1
              do j=j0,j1
              do i=i0,i1
               xx = xm1(i,j,k,iel)
               yy = ym1(i,j,k,iel)
               zz = zm1(i,j,k,iel)
               dist_max = pradius*2.0! search radius is only in 105% of pebble radius
               
              ! find the closest pebble centers.
               	do ipebble = 1,npebbles	  
                dist = sqrt((xx-pebble_xyz(1,ipebble))**2
     & +(yy-pebble_xyz(2,ipebble))**2
     & +(zz-pebble_xyz(3,ipebble))**2)
                  if(dist<dist_max) then
                    dist_max = dist
                    proj_nv(1)= (pebble_xyz(1,ipebble)-xx)/dist_max
                    proj_nv(2)= (pebble_xyz(2,ipebble)-yy)/dist_max
                    proj_nv(3)= (pebble_xyz(3,ipebble)-zz)/dist_max 
c                    pid(i,j,k,iel) = ipebble
                  endif				  
                enddo

               umeshx(i,j,k,iel) = -(pradius - dist_max)*proj_nv(1)
     &/(dble(param(11))*dt)
               umeshy(i,j,k,iel) = -(pradius - dist_max)*proj_nv(2)
     &/(dble(param(11))*dt)
               umeshz(i,j,k,iel) = -(pradius - dist_max)*proj_nv(3)
     &/(dble(param(11))*dt)

              enddo
              enddo
              enddo			  
	
           endif
        enddo
      enddo
	  
      if (nid.eq.0) write(6,*) 'project velocity: '
      pmax=glmax(umeshx,ntot)  
      pmin=glmin(umeshx,ntot)
      if (nid.eq.0) write(6,*) "umeshx: ",pmin," - ",pmax
     
      pmax=glmax(umeshy,ntot)  
      pmin=glmin(umeshy,ntot)
      if (nid.eq.0) write(6,*) "umeshy: ",pmin," - ",pmax
    
      pmax=glmax(umeshz,ntot)  
      pmin=glmin(umeshz,ntot)
      if (nid.eq.0) write(6,*) "umeshz: ",pmin," - ",pmax

c================================================================
C add filter to chamfer region, but also include some pebble-pebble cloase-but-not-touching region
c in this gap region, any moving of mesh makes neg jacobian.
c so add  geometrical filter to limit the moving of mesh in gap region.
      ichamfer = 0
      do ipebble1 = 1,npebbles
         do ipebble2 = (ipebble1+1),npebbles
      dist=sqrt((pebble_xyz(1,ipebble2)-pebble_xyz(1,ipebble1))**2
     & +(pebble_xyz(2,ipebble2)-pebble_xyz(2,ipebble1))**2
     & +(pebble_xyz(3,ipebble2)-pebble_xyz(3,ipebble1))**2)
        if(dist.le.((pradius*2.0)*1.05)) then

              ichamfer = ichamfer + 1
              chamfer_xyz(1,ichamfer) = 
     & (pebble_xyz(1,ipebble2)+pebble_xyz(1,ipebble1))/2.0
              chamfer_xyz(2,ichamfer) = 
     & (pebble_xyz(2,ipebble2)+pebble_xyz(2,ipebble1))/2.0
              chamfer_xyz(3,ichamfer) = 
     & (pebble_xyz(3,ipebble2)+pebble_xyz(3,ipebble1))/2.0
           endif
         enddo			  
      enddo

c consider, if a pebble is very close to reflector wall, also assume 
c that is a chamfer
c      do ipebble1 = 1,npebbles
c      xx = pebble_xyz(1,ipebble1)
c      yy = pebble_xyz(2,ipebble1)
c      zz = pebble_xyz(3,ipebble1)
c        if(xx.ge.(0.36-0.05*pradius*2.0))then
c            ichamfer = ichamfer + 1
c            chamfer_xyz(1,ichamfer) = 0.36
c            chamfer_xyz(2,ichamfer) = yy
c            chamfer_xyz(3,ichamfer) = zz	
c         endif
c      enddo 

      nchamfer = ichamfer
      if (nid.eq.0) write(6,*) 'number of chamfers: ',nchamfer

      cf_r = pradius*2.0*0.4 ! 0.25 works but ugly
      do iel=1,nelv
        do ifc=1,6
              id_face = bc(5,ifc,iel,1)
	          if (id_face.eq.11) then ! add filter to pebble surface moving velocity
                                      ! near chamfers
              call facind(i0,i1,j0,j1,k0,k1,nx1,ny1,nz1,ifc)
              do k=k0,k1
              do j=j0,j1
              do i=i0,i1
               xx = xm1(i,j,k,iel)
               yy = ym1(i,j,k,iel)
               zz = zm1(i,j,k,iel)

               do ichamfer = 1,nchamfer	  
         dist = sqrt((xx-chamfer_xyz(1,ichamfer))**2
     & +(yy-chamfer_xyz(2,ichamfer))**2
     & +(zz-chamfer_xyz(3,ichamfer))**2)
              pi = 3.1415926

C              if(dist.lt.cf_r) then
C              alpha = ((dist - 0.5*cf_r)/cf_r)*pi
C              kappa = (1.0 + sin(alpha))/2.0
C              umeshx(i,1,1,1) = umeshx(i,1,1,1) * kappa
C              umeshy(i,1,1,1) = umeshy(i,1,1,1) * kappa
C              umeshz(i,1,1,1) = umeshz(i,1,1,1) * kappa
C              endif

			  
              if(dist.lt.(cf_r/2.0)) then
               umeshx(i,j,k,iel) = 0.0
               umeshy(i,j,k,iel) = 0.0
               umeshz(i,j,k,iel) = 0.0
              elseif((dist.ge.(cf_r/2.0)).and.(dist.lt.cf_r)) then
               alpha = ((dist - cf_r/2.0)/(cf_r/2.0)-0.5)*pi
               kappa = (1.0 + sin(alpha))/2.0
               umeshx(i,j,k,iel )= umeshx(i,j,k,iel) * kappa
               umeshy(i,j,k,iel) = umeshy(i,j,k,iel) * kappa
               umeshz(i,j,k,iel) = umeshz(i,j,k,iel) * kappa

c         umeshx(i,j,k,iel) = umeshx(i,j,k,iel)
c     & *(dist-cf_r/2.0)/(cf_r*1.0/2.0)
c         umeshy(i,j,k,iel) = umeshy(i,j,k,iel)
c     & *(dist-cf_r/2.0)/(cf_r*1.0/2.0)
c         umeshz(i,j,k,iel) = umeshz(i,j,k,iel)
c     & *(dist-cf_r/2.0)/(cf_r*1.0/2.0)		 
               endif
                
              enddo

              enddo
              enddo
              enddo
           endif
       enddo
      enddo
c================================================================
ccc consider two types of filter
ccc 1. geometrical filter
ccc 2. local CFL number filter. 
ccc however, local CFL number filter could only be applied after
ccc wx/y/z are calculated from my_mv_mesh.	  
cc===============================================================
Ccc add filter near all 'W  ' boundary condition
c 
c      call rzero(wd,lt)
c      call rone(wf,lt)
c      df = 0.06*0.25! filter delta
c      pi = 3.1415926
c      call cheap_dist(wd,1,'W  ') ! for chamfers
c      do i=1,ntot
c         if(wd(i).le.(df/2.0)) wf(i)  = 0.0
c         if((wd(i).gt.(df/2.0))
c     &.and.(wd(i).lt.(df))) then 
c         kappa = ((wd(i) - df/2.0)/(df/2.0)-0.5)*pi
c         wf(i) = (SIN(kappa)+1.0)/2.0
c         endif
c         if(wd(i).ge.(df))  wf(i)  = 1.0
c      enddo
c 	  
c      do i=1,ntot
c       umeshx(i,1,1,1) = umeshx(i,1,1,1)*wf(i) 
c       umeshy(i,1,1,1) = umeshy(i,1,1,1)*wf(i) 
c       umeshz(i,1,1,1) = umeshz(i,1,1,1)*wf(i) 
c      enddo
Ccc===============================================================
cc add filter near all 'SYM' boundary condition

      call rzero(wd,lt)
      call rone(wf,lt)
      df = 0.06*0.2! filter delta
      pi = 3.1415926
      call cheap_dist(wd,1,'SYM') ! for chamfers
      do i=1,ntot
         if(wd(i).le.(df/2.0)) wf(i)  = 0.0
         if((wd(i).gt.(df/2.0))
     &.and.(wd(i).lt.(df))) then 
         kappa = ((wd(i) - df/2.0)/(df/2.0)-0.5)*pi
         wf(i) = (SIN(kappa)+1.0)/2.0
         endif
         if(wd(i).ge.(df))  wf(i)  = 1.0
      enddo

      do i=1,ntot
       umeshx(i,1,1,1) = umeshx(i,1,1,1)*wf(i) 
       umeshy(i,1,1,1) = umeshy(i,1,1,1)*wf(i) 
       umeshz(i,1,1,1) = umeshz(i,1,1,1)*wf(i) 
      enddo

cc============================================================
cc add filter close to the reflector
cc x=0.36 
      call rone(wf,lt)
      df = 0.06*0.2
      do i=1,ntot
         xx = xm1(i,1,1,1)
         wd(i) = 0.36 - xx
         if(wd(i).le.(df/2.0)) wf(i)  = 0.0
         if((wd(i).gt.(df/2.0))
     &.and.(wd(i).lt.(df))) then
         kappa = ((wd(i) - df/2.0)/(df/2.0)-0.5)*pi
         wf(i) = (SIN(kappa)+1.0)/2.0
         endif
         if(wd(i).ge.(df))  wf(i)  = 1.0
      enddo

      do i=1,ntot
       umeshx(i,1,1,1) = umeshx(i,1,1,1)*wf(i)
       umeshy(i,1,1,1) = umeshy(i,1,1,1)*wf(i)
       umeshz(i,1,1,1) = umeshz(i,1,1,1)*wf(i)
      enddo
cc============================================================
cc add filter close to the center of pebble bed, and reflector
cc x=0,y=0
c      call rone(wf,lt)
c      do i=1,ntot
c         r1 = sqrt(xm1(i,1,1,1)**2+ ym1(i,1,1,1)**2)
c         if(r1.le.0.1) wf(i)  = 0.0
c
c         if((r1.gt.0.1).and.(r1.lt.0.2)) then 
c         kappa = ((r1-0.1)/(0.1)-0.5)*pi
c         wf(i) = (SIN(kappa)+1.0)/2.0
c         endif
c         if(r1.ge.0.2) wf(i)  = 1.0
c
c         !if((r1.ge.0.2).and.(r1.le.1.15))  wf(i)  = 1.0
c         !
c         !if((r1.gt.1.15).and.(r1.lt.1.175)) then 
c         !kappa = ((r1-1.15)/(0.025)-0.5)*pi
c         !wf(i) = 1.0 - (SIN(kappa)+1.0)/2.0
c         !endif
c         !
c	     !if(r1.ge.1.175) wf(i)  = 0.0
c
c      enddo
c
c      do i=1,ntot
c       umeshx(i,1,1,1) = umeshx(i,1,1,1)*wf(i) 
c       umeshy(i,1,1,1) = umeshy(i,1,1,1)*wf(i) 
c       umeshz(i,1,1,1) = umeshz(i,1,1,1)*wf(i) 
c      enddo
cc===============================================================	  
c
      if (nid.eq.0) write(6,*) 'project velocity after filter'
      pmax=glmax(umeshx,ntot)  
      pmin=glmin(umeshx,ntot)
      if (nid.eq.0) write(6,*) "umeshx: ",pmin," - ",pmax
     
      pmax=glmax(umeshy,ntot)  
      pmin=glmin(umeshy,ntot)
      if (nid.eq.0) write(6,*) "umeshy: ",pmin," - ",pmax
    
      pmax=glmax(umeshz,ntot)  
      pmin=glmin(umeshz,ntot)
      if (nid.eq.0) write(6,*) "umeshz: ",pmin," - ",pmax

      return
      end
c----------------------------------------------------------------------
      subroutine my_mv_mesh
      include 'SIZE'
      include 'TOTAL'
      common /usr_umesh/ umeshx(lx1,ly1,lz1,lelt),
     & umeshy(lx1,ly1,lz1,lelt),
     & umeshz(lx1,ly1,lz1,lelt)
      parameter (lt = lx1*ly1*lz1*lelt)
      common /mrthoi/ napprx(2),nappry(2),napprz(2)
      common /mrthov/ apprx(lt,0:mxprev)
     $              , appry(lt,0:mxprev)
     $              , apprz(lt,0:mxprev)
      common /mstuff/ d(lt),h1(lt),h2(lt),mask(lt)
      common /usr_bound/ cbc_usr(6,lelt)
      character*3 cbc_usr
      real delta_usr(lt)
      real mask,pmax,pmin
      real srfbl,volbl,delta,deltap1,deltap2,arg1,arg2
      real zero,one
      integer e,f
      integer icalld
      save    icalld
      data    icalld /0/

      n = nx1*ny1*nz1*nelv
      nface = 2*ndim

      if (icalld.eq.0) then
         icalld=1
         napprx(1)=0
         nappry(1)=0
         napprz(1)=0
         nxz   = nx1*nz1
         nxyz  = nx1*ny1*nz1
         srfbl = 0.   ! Surface area of elements in b.l.
         volbl = 0.   ! Volume of elements in boundary layer
         do e=1,nelv
         do f=1,nface
            if (cbc_usr(f,e).eq.'mv ') then
               srfbl = srfbl + vlsum(area(1,1,f,e),nxz )
               volbl = volbl + vlsum(bm1 (1,1,1,e),nxyz)
            endif
         enddo
         enddo
         srfbl = glsum(srfbl,1)  ! Sum over all processors
         volbl = glsum(volbl,1)
         delta = volbl / srfbl   ! Avg thickness of b.l. elements
c        delta = 0.02            ! 1/2 separation of cylinders
         call rone (h1,n)
         call rzero(h2,n)
		 
c         do e=1,nelv
c         do f=1,nface
c         cbc(f,e,1)=cbc_usr(f,e) 
c         enddo
c         enddo
     
         call cheap_dist(d,1,'mv ')

c         do e=1,nelv
c         do f=1,nface
c         if ((cbc(f,e,1).eq.'mv ').and.(.not.ifstrs)) then
c         cbc(f,e,1)='v  '
c         endif 
c         enddo
c         enddo

cc         delta = 0.0001
         if (nid.eq.0) write(6,*) "delta: ",delta
         deltap1 = 2.0*delta  ! Protected b.l. thickness
         deltap2 = 8.0*delta
 
         do i=1,n
            arg1   = -(d(i)/deltap1)**2
            arg2   = -(d(i)/deltap2)**2
            h1(i)  = h1(i) + 1000.0*exp(arg1) + 10.0*exp(arg2)
         enddo

         call rone(mask,n)
         do e=1,nelv
         do f=1,nface
           zero = 0.
           one  = 1.
         if(cbc_usr(f,e).eq.'W  ')call facev(mask,e,f,zero,nx1,ny1,nz1)
         if(cbc_usr(f,e).eq.'W1 ')call facev(mask,e,f,one,nx1,ny1,nz1)    !! for sides to be moved.
         if(cbc_usr(f,e).eq.'v  ')call facev(mask,e,f,zero,nx1,ny1,nz1)
         if(cbc_usr(f,e).eq.'mv ')call facev(mask,e,f,zero,nx1,ny1,nz1)
         if(cbc_usr(f,e).eq.'O  ')call facev(mask,e,f,zero,nx1,ny1,nz1)
         if(cbc_usr(f,e).eq.'SYM')call facev(mask,e,f,zero,nx1,ny1,nz1)
         enddo
         enddo
         call dsop(mask,'*  ',nx1,ny1,nz1)    ! dsop mask
         call opzero(wx,wy,wz)
c        call outpost(w1mask,w2mask,w3mask,mask,mask,'msk')
c        call exitti('QUIT MASK$',nx1)

c change W1 to W
         do e=1,nelv
         do f=1,nface
         if (cbc(f,e,1).eq.'W1 ') then
         cbc(f,e,1)='W  '
         endif 
         enddo
         enddo
      endif
	  
cc      if (nid.eq.0) write(6,*) "delta: ",delta

      do e=1,nelv
      do f=1,nface
         if (cbc_usr(f,e).eq.'mv ') then
           call facec(wx,umeshx,e,f,nx1,ny1,nz1,nelv)
           call facec(wy,umeshy,e,f,nx1,ny1,nz1,nelv)
           call facec(wz,umeshz,e,f,nx1,ny1,nz1,nelv)
         endif
      enddo
      enddo
      tol = -1.e-3

      pmax=glamax(wx,n)  
      if (nid.eq.0) write(6,*) "wx: ",pmax	 
	 
      utx_usr=glamax(umeshx,n)
      uty_usr=glamax(umeshy,n)  
      utz_usr=glamax(umeshz,n)

      if (nid.eq.0) write(6,*) "utx_usr: ",utx_usr
      if (nid.eq.0) write(6,*) "uty_usr: ",uty_usr
      if (nid.eq.0) write(6,*) "utz_usr: ",utz_usr
	  
      if (utx_usr.gt.1e-8)
     & call laplaceh('mshx',wx,h1,h2,mask,vmult,1,tol,
     & 50,apprx,napprx)
      if (uty_usr.gt.1e-8) 
     & call laplaceh('mshy',wy,h1,h2,mask,vmult,1,tol,
     & 50,appry,nappry)
      if (utz_usr.gt.1e-8)
     & call laplaceh('mshz',wz,h1,h2,mask,vmult,1,tol,
     & 50,apprz,napprz)

      ifxyo=.true.
      if (mod(istep,iostep).eq.0) call outpost(wx,wy,wz,h1,h1,'mvv')
      if (mod(istep,iostep).eq.0) then
      call outpost(umeshx,umeshy,umeshz,h1,h1,'mv2')
      endif

      return
      end
c-----------------------------------------------------------------------
      subroutine laplaceh
     $     (name,u,h1,h2,mask,mult,ifld,tli,maxi,approx,napprox)
c
c     Solve Laplace's equation, with projection onto previous solutions.
c
c     Boundary condition strategy:
c
c     u = u0 + ub
c
c        u0 = 0 on Dirichlet boundaries
c        ub = u on Dirichlet boundaries
c
c        _
c        A ( u0 + ub ) = 0
c
c        _            _
c        A  u0  =   - A ub
c
c        _             _
c       MAM u0  =   -M A ub,    M is the mask
c
c                      _
c        A  u0  =   -M A ub ,  Helmholtz solve with SPD matrix A
c
c        u = u0+ub
c
      include 'SIZE'
      include 'TOTAL'
      include 'CTIMER'
c
      character*4 name
      real u(1),h1(1),h2(1),mask(1),mult(1),approx (1)
      integer   napprox(1)

      parameter (lt=lx1*ly1*lz1*lelt)
      common /scruz/ r (lt),ub(lt)

      logical ifstdh
      character*4  cname
      character*6  name6

      logical ifwt,ifvec

      call chcopy(cname,name,4)
      call capit (cname,4)

      call blank (name6,6)
      call chcopy(name6,name,4)
      ifwt  = .true.
      ifvec = .false.
      isd   = 1
      imsh  = 1
      nel   = nelfld(ifld)

      n = nx1*ny1*nz1*nel

      call copy (ub,u,n)             ! ub = u on boundary
      call dsavg(ub)                 ! Make certain ub is in H1
                                     !     _
      call axhelm (r,ub,h1,h2,1,1)   ! r = A*ub

      do i=1,n                       !        _
         r(i)=-r(i)*mask(i)          ! r = -M*A*ub
      enddo

      call dssum  (r,nx1,ny1,nz1)    ! dssum rhs

      call project1
     $    (r,n,approx,napprox,h1,h2,mask,mult,ifwt,ifvec,name6)

      tol = abs(tli)
      p22=param(22)
      param(22)=abs(tol)
      if (nel.eq.nelv) then
        call hmhzpf (name,u,r,h1,h2,mask,mult,imsh,tol,maxi,isd,binvm1)
      else
        call hmhzpf (name,u,r,h1,h2,mask,mult,imsh,tol,maxi,isd,bintm1)
      endif
      param(22)=p22

      call project2
     $     (u,n,approx,napprox,h1,h2,mask,mult,ifwt,ifvec,name6)

      call add2(u,ub,n)

      return
      end
C=======================================================================
